#ifndef __OPLUS_CHG_TRACK_H__
#define __OPLUS_CHG_TRACK_H__

#include <linux/version.h>
#include <linux/of.h>
#include <linux/debugfs.h>

#define OPLUS_CHG_TRACK_CURX_INFO_LEN (1024 + 512)

enum oplus_chg_track_cmd_error {
	TRACK_CMD_ACK_OK,
	TRACK_CMD_ERROR_CHIP_NULL = 1,
	TRACK_CMD_ERROR_DATA_NULL,
	TRACK_CMD_ERROR_DATA_INVALID,
	TRACK_CMD_ERROR_TIME_OUT,
};

enum oplus_chg_track_info_type {
	TRACK_NOTIFY_TYPE_DEFAULT,
	TRACK_NOTIFY_TYPE_SOC_JUMP,
	TRACK_NOTIFY_TYPE_GENERAL_RECORD,
	TRACK_NOTIFY_TYPE_NO_CHARGING,
	TRACK_NOTIFY_TYPE_CHARGING_SLOW,
	TRACK_NOTIFY_TYPE_CHARGING_BREAK,
	TRACK_NOTIFY_TYPE_DEVICE_ABNORMAL,
	TRACK_NOTIFY_TYPE_MAX,
};

enum oplus_chg_track_info_flag {
	TRACK_NOTIFY_FLAG_DEFAULT,
	TRACK_NOTIFY_FLAG_UI_SOC_LOAD_JUMP,
	TRACK_NOTIFY_FLAG_SOC_JUMP,
	TRACK_NOTIFY_FLAG_UI_SOC_JUMP,
	TRACK_NOTIFY_FLAG_UI_SOC_TO_SOC_JUMP,

	TRACK_NOTIFY_FLAG_CHARGER_INFO,
	TRACK_NOTIFY_FLAG_UISOC_KEEP_1_T_INFO,
	TRACK_NOTIFY_FLAG_VBATT_TOO_LOW_INFO,
	TRACK_NOTIFY_FLAG_USBTEMP_INFO,
	TRACK_NOTIFY_FLAG_VBATT_DIFF_OVER_INFO,
	TRACK_NOTIFY_FLAG_WLS_TRX_INFO,

	TRACK_NOTIFY_FLAG_NO_CHARGING,

	TRACK_NOTIFY_FLAG_CHG_SLOW_TBATT_WARM,
	TRACK_NOTIFY_FLAG_CHG_SLOW_TBATT_COLD,
	TRACK_NOTIFY_FLAG_CHG_SLOW_NON_STANDARD_PA,
	TRACK_NOTIFY_FLAG_CHG_SLOW_BATT_CAP_HIGH,
	TRACK_NOTIFY_FLAG_CHG_SLOW_COOLDOWN,
	TRACK_NOTIFY_FLAG_CHG_SLOW_WLS_SKEW,
	TRACK_NOTIFY_FLAG_CHG_SLOW_VERITY_FAIL,
	TRACK_NOTIFY_FLAG_CHG_SLOW_OTHER,

	TRACK_NOTIFY_FLAG_FAST_CHARGING_BREAK,
	TRACK_NOTIFY_FLAG_GENERAL_CHARGING_BREAK,
	TRACK_NOTIFY_FLAG_WLS_CHARGING_BREAK,

	TRACK_NOTIFY_FLAG_WLS_TRX_ABNORMAL,
	TRACK_NOTIFY_FLAG_MAX_CNT,
};

enum oplus_chg_track_mcu_voocphy_break_code {
	TRACK_VOOCPHY_BREAK_DEFAULT = 0,
	TRACK_MCU_VOOCPHY_FAST_ABSENT,
	TRACK_MCU_VOOCPHY_BAD_CONNECTED,
	TRACK_MCU_VOOCPHY_BTB_TEMP_OVER,
	TRACK_MCU_VOOCPHY_TEMP_OVER,
	TRACK_MCU_VOOCPHY_NORMAL_TEMP_FULL,
	TRACK_MCU_VOOCPHY_LOW_TEMP_FULL,
	TRACK_MCU_VOOCPHY_BAT_TEMP_EXIT,
	TRACK_MCU_VOOCPHY_DATA_ERROR,
	TRACK_MCU_VOOCPHY_OTHER,
};

enum oplus_chg_track_adsp_voocphy_break_code {
	TRACK_ADSP_VOOCPHY_BREAK_DEFAULT = 0,
	TRACK_ADSP_VOOCPHY_BAD_CONNECTED,
	TRACK_ADSP_VOOCPHY_FRAME_H_ERR,
	TRACK_ADSP_VOOCPHY_CLK_ERR,
	TRACK_ADSP_VOOCPHY_HW_VBATT_HIGH,
	TRACK_ADSP_VOOCPHY_HW_TBATT_HIGH,
	TRACK_ADSP_VOOCPHY_COMMU_TIME_OUT,
	TRACK_ADSP_VOOCPHY_ADAPTER_COPYCAT,
	TRACK_ADSP_VOOCPHY_BTB_TEMP_OVER,
	TRACK_ADSP_VOOCPHY_FULL,
	TRACK_ADSP_VOOCPHY_BATT_TEMP_OVER,
	TRACK_ADSP_VOOCPHY_SWITCH_TEMP_RANGE,
	TRACK_ADSP_VOOCPHY_OTHER,
};

enum oplus_chg_track_chg_status {
	TRACK_CHG_DEFAULT,
	TRACK_WIRED_FASTCHG_FULL,
	TRACK_WIRED_REPORT_FULL,
	TRACK_WIRED_CHG_DONE,
	TRACK_WLS_FASTCHG_FULL,
	TRACK_WLS_REPORT_FULL,
	TRACK_WLS_CHG_DONE,
};

enum oplus_chg_track_cp_voocphy_break_code {
	TRACK_CP_VOOCPHY_BREAK_DEFAULT = 0,
	TRACK_CP_VOOCPHY_FAST_ABSENT,
	TRACK_CP_VOOCPHY_BAD_CONNECTED,
	TRACK_CP_VOOCPHY_FRAME_H_ERR,
	TRACK_CP_VOOCPHY_BTB_TEMP_OVER,
	TRACK_CP_VOOCPHY_COMMU_TIME_OUT,
	TRACK_CP_VOOCPHY_ADAPTER_COPYCAT,
	TRACK_CP_VOOCPHY_FULL,
	TRACK_CP_VOOCPHY_BATT_TEMP_OVER,
	TRACK_CP_VOOCPHY_USER_EXIT_FASTCHG,
	TRACK_CP_VOOCPHY_OTHER,
};
	
enum oplus_chg_wls_type {
	OPLUS_CHG_WLS_UNKNOWN,
	OPLUS_CHG_WLS_BPP,
	OPLUS_CHG_WLS_EPP,
	OPLUS_CHG_WLS_EPP_PLUS,
	OPLUS_CHG_WLS_VOOC,
	OPLUS_CHG_WLS_SVOOC,
	OPLUS_CHG_WLS_PD_65W,
	OPLUS_CHG_WLS_TRX,
};

enum oplus_chg_mod_property {
	OPLUS_CHG_PROP_TYPE,
	OPLUS_CHG_PROP_STATUS,
	OPLUS_CHG_PROP_ONLINE,
	OPLUS_CHG_PROP_PRESENT,
	OPLUS_CHG_PROP_VOLTAGE_NOW,
	OPLUS_CHG_PROP_VOLTAGE_MAX,
	OPLUS_CHG_PROP_VOLTAGE_MIN,
	OPLUS_CHG_PROP_CURRENT_NOW,
	OPLUS_CHG_PROP_CURRENT_MAX,
	OPLUS_CHG_PROP_INPUT_CURRENT_NOW,
	OPLUS_CHG_PROP_USB_TYPE,
	OPLUS_CHG_PROP_FASTCHG_STATUS,
	OPLUS_CHG_PROP_ADAPTER_SID,
	OPLUS_CHG_PROP_ADAPTER_TYPE,
	OPLUS_CHG_PROP_DOCK_TYPE,
	OPLUS_CHG_PROP_WLS_SKEW_CURR,
	OPLUS_CHG_PROP_VERITY,
	OPLUS_CHG_PROP_TEMP_REGION,
	OPLUS_CHG_PROP_CON_TEMP1,
	OPLUS_CHG_PROP_CON_TEMP2,
	OPLUS_CHG_PROP_CHG_ENABLE,
	OPLUS_CHG_PROP_OTG_MODE,
	OPLUS_CHG_PROP_TRX_VOLTAGE_NOW,
	OPLUS_CHG_PROP_TRX_CURRENT_NOW,
	OPLUS_CHG_PROP_TRX_STATUS,
	OPLUS_CHG_PROP_TRX_ONLINE,
	OPLUS_CHG_PROP_WLS_TYPE,
	OPLUS_CHG_PROP_DEVIATED,
	OPLUS_CHG_PROP_FORCE_TYPE,
	OPLUS_CHG_PROP_STATUS_DELAY,
	OPLUS_CHG_PROP_PATH_CTRL,
	OPLUS_CHG_PROP_QUIET_MODE,
	OPLUS_CHG_PROP_VRECT_NOW,
	OPLUS_CHG_PROP_TRX_POWER_EN,
	OPLUS_CHG_PROP_TRX_POWER_VOL,
	OPLUS_CHG_PROP_TRX_POWER_CURR_LIMIT,
	OPLUS_CHG_PROP_CAPACITY,
	OPLUS_CHG_PROP_REAL_CAPACITY,
	OPLUS_CHG_PROP_CHARGE_TYPE,
	OPLUS_CHG_PROP_CELL_NUM,
	OPLUS_CHG_PROP_MODEL_NAME,
	OPLUS_CHG_PROP_TEMP,
	OPLUS_CHG_PROP_HEALTH,
	OPLUS_CHG_PROP_TECHNOLOGY,
	OPLUS_CHG_PROP_CYCLE_COUNT,
	OPLUS_CHG_PROP_VOLTAGE_OCV,
	OPLUS_CHG_PROP_CHARGE_CONTROL_LIMIT,
	OPLUS_CHG_PROP_CHARGE_CONTROL_LIMIT_MAX,
	OPLUS_CHG_PROP_CHARGE_COUNTER,
	OPLUS_CHG_PROP_CHARGE_FULL_DESIGN,
	OPLUS_CHG_PROP_CHARGE_FULL,
	OPLUS_CHG_PROP_TIME_TO_FULL_AVG,
	OPLUS_CHG_PROP_TIME_TO_FULL_NOW,
	OPLUS_CHG_PROP_TIME_TO_EMPTY_AVG,
	OPLUS_CHG_PROP_POWER_NOW,
	OPLUS_CHG_PROP_POWER_AVG,
	OPLUS_CHG_PROP_CAPACITY_LEVEL,
	OPLUS_CHG_PROP_SHIP_MODE,
	OPLUS_CHG_PROP_FACTORY_MODE,
	OPLUS_CHG_PROP_TX_POWER,
	OPLUS_CHG_PROP_RX_POWER,
	OPLUS_CHG_PROP_RX_MAX_POWER,
	OPLUS_CHG_PROP_VOLTAGE_NOW_CELL1,
	OPLUS_CHG_PROP_VOLTAGE_NOW_CELL2,
	OPLUS_CHG_PROP_MMI_CHARGING_ENABLE,
	OPLUS_CHG_PROP_TYPEC_CC_ORIENTATION,
	OPLUS_CHG_PROP_HW_DETECT,
	OPLUS_CHG_PROP_FOD_CAL,
	OPLUS_CHG_PROP_SKIN_TEMP,
	OPLUS_CHG_PROP_BATT_CHG_ENABLE,
	OPLUS_CHG_PROP_ONLINE_KEEP,
	OPLUS_CHG_PROP_CONNECT_DISABLE,
	OPLUS_CHG_PROP_REMAINING_CAPACITY,
	OPLUS_CHG_PROP_CALL_ON,
	OPLUS_CHG_PROP_CAMERA_ON,
	OPLUS_CHG_PROP_OTG_SWITCH,
	OPLUS_CHG_PROP_BATTERY_NOTIFY_CODE,
#ifdef OPLUS_CHG_REG_DUMP_ENABLE
	OPLUS_CHG_PROP_REG_DUMP,
#endif
#ifndef CONFIG_OPLUS_CHG_OOS
	OPLUS_CHG_PROP_AUTHENTICATE,
	OPLUS_CHG_PROP_BATTERY_CC,
	OPLUS_CHG_PROP_BATTERY_FCC,
	OPLUS_CHG_PROP_BATTERY_RM,
	OPLUS_CHG_PROP_BATTERY_SOH,
#ifdef CONFIG_OPLUS_CALL_MODE_SUPPORT
	OPLUS_CHG_PROP_CALL_MODE,
#endif
	OPLUS_CHG_PROP_CHARGE_TECHNOLOGY,
#ifdef CONFIG_OPLUS_CHIP_SOC_NODE
	OPLUS_CHG_PROP_CHIP_SOC,
#endif
#ifdef CONFIG_OPLUS_SMART_CHARGER_SUPPORT
	OPLUS_CHG_PROP_COOL_DOWN,
#endif
	OPLUS_CHG_PROP_FAST_CHARGE,
#ifdef CONFIG_OPLUS_SHORT_C_BATT_CHECK
#ifdef CONFIG_OPLUS_SHORT_USERSPACE
	OPLUS_CHG_PROP_SHORT_C_LIMIT_CHG,
	OPLUS_CHG_PROP_SHORT_C_LIMIT_RECHG,
	OPLUS_CHG_PROP_CHARGE_TERM_CURRENT,
	OPLUS_CHG_PROP_INPUT_CURRENT_SETTLED,
#endif
#endif
#ifdef CONFIG_OPLUS_SHORT_HW_CHECK
	OPLUS_CHG_PROP_SHORT_C_HW_FEATURE,
	OPLUS_CHG_PROP_SHORT_C_HW_STATUS,
#endif
#ifdef CONFIG_OPLUS_SHORT_IC_CHECK
	OPLUS_CHG_PROP_SHORT_IC_OTP_STATUS,
	OPLUS_CHG_PROP_SHORT_IC_VOLT_THRESH,
	OPLUS_CHG_PROP_SHORT_IC_OTP_VALUE,
#endif
	OPLUS_CHG_PROP_VOOCCHG_ING,
	OPLUS_CHG_PROP_OTG_ONLINE,
	OPLUS_CHG_PROP_USB_STATUS,
	OPLUS_CHG_PROP_FAST_CHG_TYPE,
	OPLUS_CHG_PROP_USBTEMP_VOLT_L,
	OPLUS_CHG_PROP_USBTEMP_VOLT_R,
	OPLUS_CHG_PROP_TX_VOLTAGE_NOW,
	OPLUS_CHG_PROP_TX_CURRENT_NOW,
	OPLUS_CHG_PROP_CP_VOLTAGE_NOW,
	OPLUS_CHG_PROP_CP_CURRENT_NOW,
	OPLUS_CHG_PROP_WIRELESS_MODE,
	OPLUS_CHG_PROP_WIRELESS_TYPE,
	OPLUS_CHG_PROP_CEP_INFO,
	OPLUS_CHG_PROP_REAL_TYPE,
	OPLUS_CHG_PROP_CHARGE_NOW,
#endif /* CONFIG_OPLUS_CHG_OOS */
	OPLUS_CHG_PROP_RX_VOUT_UVP,
	OPLUS_CHG_PROP_FW_UPGRADING,
	OPLUS_CHG_PROP_MAX,
	/* extended property */
	OPLUS_CHG_EXTERN_PROP_UPGRADE_FW = OPLUS_CHG_PROP_MAX,
	OPLUS_CHG_EXTERN_PROP_CHARGE_PARAMETER,
	OPLUS_CHG_EXTERN_PROP_VOLTAGE_NOW_CELL,
	OPLUS_CHG_EXTERN_PROP_PATH_CURRENT,
	OPLUS_CHG_PROP_FTM_TEST,
};

enum oplus_chg_mod_type {
	OPLUS_CHG_MOD_COMMON,
	OPLUS_CHG_MOD_USB,
	OPLUS_CHG_MOD_WIRELESS,
	OPLUS_CHG_MOD_BATTERY,
	OPLUS_CHG_MOD_MAIN,
	OPLUS_CHG_MOD_TRACK,
};

enum oplus_chg_event {
	OPLUS_CHG_EVENT_CHANGED,
	OPLUS_CHG_EVENT_ONLINE,
	OPLUS_CHG_EVENT_OFFLINE,
	OPLUS_CHG_EVENT_PRESENT,
	OPLUS_CHG_EVENT_NO_PRESENT,
	OPLUS_CHG_EVENT_APSD_DONE,
	OPLUS_CHG_EVENT_LCD_ON,
	OPLUS_CHG_EVENT_LCD_OFF,
	OPLUS_CHG_EVENT_CALL_ON,
	OPLUS_CHG_EVENT_CALL_OFF,
	OPLUS_CHG_EVENT_CAMERA_ON,
	OPLUS_CHG_EVENT_CAMERA_OFF,
	OPLUS_CHG_EVENT_OP_TRX,
	OPLUS_CHG_EVENT_CHECK_TRX,
	OPLUS_CHG_EVENT_ADSP_STARTED,
	OPLUS_CHG_EVENT_OTG_ENABLE,
	OPLUS_CHG_EVENT_OTG_DISABLE,
	OPLUS_CHG_EVENT_POWER_CHANGED,
	OPLUS_CHG_EVENT_CHARGE_DONE,
	OPLUS_CHG_EVENT_CLEAN_CHARGE_DONE,
	OPLUS_CHG_EVENT_SVOOC_ONLINE,
	OPLUS_CHG_EVENT_RX_IIC_ERR,
#ifdef OPLUS_CHG_REG_DUMP_ENABLE
	OPLUS_CHG_EVENT_REG_DUMP,
#endif
	OPLUS_CHG_EVENT_RX_FAST_ERR,
	OPLUS_CHG_EVENT_TX_EPP_CAP,
};


union oplus_chg_mod_propval {
	int intval;
	const char *strval;
};

typedef struct {
	unsigned int type_reason;
	unsigned int flag_reason;
	unsigned char crux_info[OPLUS_CHG_TRACK_CURX_INFO_LEN];
} __attribute__ ((packed)) oplus_chg_track_trigger;

struct oplus_chg_mod {
	const struct oplus_chg_mod_desc *desc;

	char **supplied_to;
	size_t num_supplicants;

	struct device_node *of_node;
	void *drv_data;

	/* private */
	struct device dev;
	struct work_struct changed_work;
	struct delayed_work deferred_register_work;
	struct atomic_notifier_head *notifier;
	spinlock_t changed_lock;
	bool changed;
	bool initialized;
	bool removing;
	atomic_t use_cnt;
	struct list_head list;
};

struct oplus_chg_mod_config {
	struct device_node *of_node;
	struct fwnode_handle *fwnode;

	/* Driver private data */
	void *drv_data;

	/* Device specific sysfs attributes */
	const struct attribute_group **attr_grp;

	char **supplied_to;
	size_t num_supplicants;
};

struct oplus_chg_mod_desc {
	const char *name;
	enum oplus_chg_mod_type type;
	enum oplus_chg_mod_property *properties;
	enum oplus_chg_mod_property *uevent_properties;
	struct oplus_chg_exten_prop *exten_properties;
	size_t num_properties;
	size_t uevent_num_properties;
	size_t num_exten_properties;

	int (*get_property)(struct oplus_chg_mod *ocm,
			    enum oplus_chg_mod_property ocm_prop,
			    union oplus_chg_mod_propval *val);
	int (*set_property)(struct oplus_chg_mod *ocm,
			    enum oplus_chg_mod_property ocm_prop,
			    const union oplus_chg_mod_propval *val);
	int (*property_is_writeable)(struct oplus_chg_mod *ocm,
				     enum oplus_chg_mod_property ocm_prop);
};


void oplus_chg_track_record_chg_type_info(void);
int oplus_chg_track_upload_trigger_data(oplus_chg_track_trigger data);
int oplus_chg_track_comm_monitor(void);
int oplus_chg_track_check_wired_charging_break(int vbus_rising);
int oplus_chg_track_set_fastchg_break_code(int fastchg_break_code);
int oplus_chg_track_check_wls_charging_break(int wls_connect);
struct dentry* oplus_chg_track_get_debugfs_root(void);
int oplus_chg_track_obtain_power_info(char *power_info, int len);
bool oplus_chg_track_is_new_lma(void);
void oplus_chg_mod_unregister(struct oplus_chg_mod *ocm);

#endif


